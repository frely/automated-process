package aliyunDescribeInstances

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"
	"time"

	openapi "github.com/alibabacloud-go/darabonba-openapi/client"
	ecs20140526 "github.com/alibabacloud-go/ecs-20140526/v4/client"
	util "github.com/alibabacloud-go/tea-utils/service"
	"github.com/alibabacloud-go/tea/tea"
	"github.com/frely/automated-process/cloud-service/ecs/cmd/aliyunDescribeRegions"
	_ "github.com/lib/pq"
	"github.com/spf13/viper"
)

var (
	resStr     string
	sqlConnStr string
)

type AutoGenerated struct {
	Instance []struct {
		AutoReleaseTime string `json:"AutoReleaseTime"`
		ClusterId       string `json:"ClusterId"`
		Cpu             int    `json:"Cpu"`
		CPUOptions      struct {
			CoreCount      int    `json:"CoreCount"`
			Numa           string `json:"Numa"`
			ThreadsPerCore int    `json:"ThreadsPerCore"`
		} `json:"CpuOptions"`
		CreationTime           string `json:"CreationTime"`
		CreditSpecification    string `json:"CreditSpecification"`
		DedicatedHostAttribute struct {
			DedicatedHostClusterId string `json:"DedicatedHostClusterId"`
			DedicatedHostId        string `json:"DedicatedHostId"`
			DedicatedHostName      string `json:"DedicatedHostName"`
		} `json:"DedicatedHostAttribute"`
		DedicatedInstanceAttribute struct {
			Affinity string `json:"Affinity"`
			Tenancy  string `json:"Tenancy"`
		} `json:"DedicatedInstanceAttribute"`
		DeletionProtection         bool   `json:"DeletionProtection"`
		DeploymentSetId            string `json:"DeploymentSetId"`
		Description                string `json:"Description"`
		DeviceAvailable            bool   `json:"DeviceAvailable"`
		EcsCapacityReservationAttr struct {
			CapacityReservationId         string `json:"CapacityReservationId"`
			CapacityReservationPreference string `json:"CapacityReservationPreference"`
		} `json:"EcsCapacityReservationAttr"`
		EipAddress struct {
			AllocationId       string `json:"AllocationId"`
			InternetChargeType string `json:"InternetChargeType"`
			IpAddress          string `json:"IpAddress"`
		} `json:"EipAddress"`
		ExpiredTime        string `json:"ExpiredTime"`
		GPUAmount          int    `json:"GPUAmount"`
		GPUSpec            string `json:"GPUSpec"`
		HibernationOptions struct {
			Configured bool `json:"Configured"`
		} `json:"HibernationOptions"`
		HostName     string `json:"HostName"`
		ImageId      string `json:"ImageId"`
		ImageOptions struct {
		} `json:"ImageOptions"`
		InnerIPAddress struct {
		} `json:"InnerIpAddress"`
		InstanceChargeType      string `json:"InstanceChargeType"`
		InstanceId              string `json:"InstanceId"`
		InstanceName            string `json:"InstanceName"`
		InstanceNetworkType     string `json:"InstanceNetworkType"`
		InstanceType            string `json:"InstanceType"`
		InstanceTypeFamily      string `json:"InstanceTypeFamily"`
		InternetChargeType      string `json:"InternetChargeType"`
		InternetMaxBandwidthIn  int    `json:"InternetMaxBandwidthIn"`
		InternetMaxBandwidthOut int    `json:"InternetMaxBandwidthOut"`
		IoOptimized             bool   `json:"IoOptimized"`
		Memory                  int    `json:"Memory"`
		MetadataOptions         struct {
			HTTPEndpoint string `json:"HttpEndpoint"`
			HTTPTokens   string `json:"HttpTokens"`
		} `json:"MetadataOptions"`
		NetworkInterfaces struct {
			NetworkInterface []struct {
				MacAddress         string `json:"MacAddress"`
				NetworkInterfaceId string `json:"NetworkInterfaceId"`
				PrimaryIpAddress   string `json:"PrimaryIpAddress"`
				PrivateIPSets      struct {
					PrivateIPSet []struct {
						Primary       bool   `json:"Primary"`
						PrivateIPSets string `json:"PrivateIPSets"`
					} `json:"PrivateIpSet"`
				} `json:"PrivateIpSets"`
				Type string `json:"Type"`
			} `json:"NetworkInterface"`
		} `json:"NetworkInterfaces"`
		OSName         string `json:"OSName"`
		OSNameEn       string `json:"OSNameEn"`
		OSType         string `json:"OSType"`
		OperationLocks struct {
		} `json:"OperationLocks"`
		PublicIpAddress struct {
			IpAddress []string `json:"IpAddress"`
		} `json:"PublicIpAddress"`
		Recyclable       bool   `json:"Recyclable"`
		RegionId         string `json:"RegionId"`
		ResourceGroupId  string `json:"ResourceGroupId"`
		SaleCycle        string `json:"SaleCycle"`
		SecurityGroupIds struct {
			SecurityGroupId []string `json:"SecurityGroupId"`
		} `json:"SecurityGroupIds"`
		SerialNumber   string `json:"SerialNumber"`
		SpotPriceLimit int    `json:"SpotPriceLimit"`
		SpotStrategy   string `json:"SpotStrategy"`
		StartTime      string `json:"StartTime"`
		Status         string `json:"Status"`
		StoppedMode    string `json:"StoppedMode"`
		VlanId         string `json:"VlanId"`
		VpcAttributes  struct {
			NatIPAddress     string `json:"NatIpAddress"`
			PrivateIpAddress struct {
				IpAddress []string `json:"IpAddress"`
			} `json:"PrivateIpAddress"`
			VSwitchId string `json:"VSwitchId"`
			VpcId     string `json:"VpcId"`
		} `json:"VpcAttributes"`
		ZoneId      string `json:"ZoneId"`
		KeyPairName string `json:"KeyPairName,omitempty"`
	} `json:"Instance"`
}

// 写入ecs信息到数据库
func ToSql() {
	customRegion := viper.GetString("customRegion")
	if customRegion != "" {
		// 查询指定Regions
		viper.Set("RegionId", customRegion)
		getEcs()
		log.Println("写入数据: RegionId", customRegion)
		writeSql(resStr)
	} else {
		for _, v := range aliyunDescribeRegions.Get() {
			viper.Set("RegionId", v)
			getEcs()
			log.Println("写入数据: RegionId", v)
			writeSql(resStr)
			// 限制速率避免报错
			time.Sleep(3 * time.Second)
		}
	}
}

// 如果不存在表，则新建。
func CheckSqlTable() {
	sqlConnStr = fmt.Sprintf("postgres://%s:%s@%s:%s/%s?sslmode=disable",
		viper.GetString("POSTGRES_USER"),
		viper.GetString("POSTGRES_PASSWORD"),
		viper.GetString("POSTGRES_HOST"),
		viper.GetString("POSTGRES_PORT"),
		viper.GetString("POSTGRES_DB"))
	db, err := sql.Open("postgres", sqlConnStr)
	if err != nil {
		log.Fatalln("连接数据库失败", err)
	}
	defer db.Close()

	rows, err := db.Query(`select count(*) from pg_class where relname = 'aliyunEcs';`)
	defer rows.Close()
	if err != nil {
		log.Fatalln("查询表失败：", err)
	}
	for rows.Next() {
		var count string
		err := rows.Scan(&count)
		if err != nil {
			log.Fatalln("获取表失败", err)
		}
		if count == "1" {
			log.Println("清空表")
			sqlData := `TRUNCATE TABLE "aliyunEcs"`
			rows2, err := db.Query(sqlData)
			if err != nil {
				log.Fatalln("清空表失败：", err)
			}
			rows2.Close()
		} else {
			log.Println("创建表：aliyunEcs")
			sqlData := `
				CREATE TABLE "public"."aliyunEcs" (
				"ResourceGroupId" VARCHAR(200) NOT NULL,
				"Memory" INTEGER NOT NULL,
				"Cpu" INTEGER NOT NULL,
				"OSName" VARCHAR(200) NOT NULL,
				"ImageId" VARCHAR(200) NOT NULL,
				"EipAddress" VARCHAR(200) NOT NULL,
				"HostName" VARCHAR(200) NOT NULL,
				"Status" VARCHAR(200) NOT NULL,
				"VpcAttributes" VARCHAR(200) NOT NULL,
				"InstanceId" VARCHAR(200) NOT NULL,
				"InstanceName" VARCHAR(200) NOT NULL,
				"InternetMaxBandwidthOut" INTEGER NOT NULL,
				"OSType" VARCHAR(200) NOT NULL,
				"Description" VARCHAR(200) NOT NULL,
				"PublicIpAddress" VARCHAR(200) NOT NULL,
				"RegionId" VARCHAR(200) NOT NULL
				);`
			rows2, err := db.Query(sqlData)
			if err != nil {
				log.Fatalln("创建表失败：", err)
			}
			rows2.Close()

			commitList := [][]string{
				{"ResourceGroupId", "实例所属的企业资源组ID"},
				{"Memory", "内存大小，单位MiB"},
				{"Cpu", "vCPU数"},
				{"OSName", "实例的操作系统名称"},
				{"ImageId", "实例运行的镜像ID"},
				{"EipAddress", "弹性公网IP绑定信息"},
				{"HostName", "实例的主机名"},
				{"Status", "实例状态"},
				{"VpcAttributes", "实例的私网IP信息"},
				{"InstanceId", "实例ID"},
				{"InstanceName", "实例名称"},
				{"InternetMaxBandwidthOut", "公网出带宽最大值，单位Mbit/s"},
				{"OSType", "系统类型"},
				{"Description", "实例描述"},
				{"PublicIpAddress", "实例公网IP地址"},
				{"RegionId", "实例所属地域ID"}}
			for _, v := range commitList {
				sqlData := fmt.Sprintf(`COMMENT ON COLUMN "aliyunEcs"."%s" IS '%s'`, v[0], v[1])
				rows3, err := db.Query(sqlData)
				if err != nil {
					log.Fatalln("添加注释失败: ", sqlData, err)
				}
				rows3.Close()
			}
		}
	}
	if err := rows.Err(); err != nil {
		log.Fatalln("查询sql失败", err)
	}
}

// 写入数据库
func writeSql(resStr string) {
	if resStr == "" {
		log.Fatalln("Ecs is null")
	}
	var p AutoGenerated
	err := json.Unmarshal([]byte(resStr), &p)
	if err != nil {
		log.Fatalln("解析返回值失败", err)
	}

	db, err := sql.Open("postgres", sqlConnStr)
	if err != nil {
		log.Fatalln("连接数据库失败 func writeSql()", err)
	}
	defer db.Close()
	for _, v := range p.Instance {
		sqlData := fmt.Sprintf(`INSERT INTO "aliyunEcs"("ResourceGroupId","Memory","Cpu","OSName","ImageId","EipAddress","HostName","Status","VpcAttributes","InstanceId","InstanceName","InternetMaxBandwidthOut","OSType","Description","PublicIpAddress","RegionId") VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')`,
			v.ResourceGroupId,
			strconv.Itoa(v.Memory),
			strconv.Itoa(v.Cpu),
			v.OSName,
			v.ImageId,
			v.EipAddress.IpAddress,
			v.HostName,
			v.Status,
			v.VpcAttributes.PrivateIpAddress.IpAddress,
			v.InstanceId,
			v.InstanceName,
			strconv.Itoa(v.InternetMaxBandwidthOut),
			v.OSType,
			v.Description,
			v.PublicIpAddress.IpAddress,
			v.RegionId)

		rows, err := db.Query(sqlData)
		if err != nil {
			log.Fatalln("sql执行失败 func writeSql(): ", err, sqlData)
		}
		rows.Close()
	}
}

// Description:
//
// 使用AK&SK初始化账号Client
//
// @return Client
//
// @throws Exception
func CreateClient() (_result *ecs20140526.Client, _err error) {
	// 工程代码泄露可能会导致 AccessKey 泄露，并威胁账号下所有资源的安全性。以下代码示例仅供参考。
	// 建议使用更安全的 STS 方式，更多鉴权访问方式请参见：https://help.aliyun.com/document_detail/378661.html。
	config := &openapi.Config{
		// 必填，请确保代码运行环境设置了环境变量 ALIBABA_CLOUD_ACCESS_KEY_ID。
		AccessKeyId: tea.String(viper.GetString("ALIBABA_CLOUD_ACCESS_KEY_ID")),
		// 必填，请确保代码运行环境设置了环境变量 ALIBABA_CLOUD_ACCESS_KEY_SECRET。
		AccessKeySecret: tea.String(viper.GetString("ALIBABA_CLOUD_ACCESS_KEY_SECRET")),
	}
	// Endpoint 请参考 https://api.aliyun.com/product/Ecs
	config.Endpoint = tea.String("ecs." + viper.GetString("RegionId") + ".aliyuncs.com")
	_result = &ecs20140526.Client{}
	_result, _err = ecs20140526.NewClient(config)
	return _result, _err
}

func _main(args []*string) (_err error) {
	client, _err := CreateClient()
	if _err != nil {
		return _err
	}

	describeInstancesRequest := &ecs20140526.DescribeInstancesRequest{
		RegionId: tea.String(viper.GetString("RegionId")),
		PageSize: tea.Int32(1000),
	}
	runtime := &util.RuntimeOptions{}
	tryErr := func() (_e error) {
		defer func() {
			if r := tea.Recover(recover()); r != nil {
				_e = r
			}
		}()
		// 复制代码运行请自行打印 API 的返回值
		res, _err := client.DescribeInstancesWithOptions(describeInstancesRequest, runtime)
		if _err != nil {
			return _err
		}
		resStr = res.Body.Instances.String()
		return nil
	}()

	if tryErr != nil {
		var error = &tea.SDKError{}
		if _t, ok := tryErr.(*tea.SDKError); ok {
			error = _t
		} else {
			error.Message = tea.String(tryErr.Error())
		}
		// 此处仅做打印展示，请谨慎对待异常处理，在工程项目中切勿直接忽略异常。
		// 错误 message
		fmt.Println(tea.StringValue(error.Message))
		// 诊断地址
		var data interface{}
		d := json.NewDecoder(strings.NewReader(tea.StringValue(error.Data)))
		d.Decode(&data)
		if m, ok := data.(map[string]interface{}); ok {
			recommend, _ := m["Recommend"]
			fmt.Println(recommend)
		}
		msg := util.AssertAsString(error.Message)
		if *msg != "" {
			return _err
		}
	}
	return _err
}

func getEcs() {
	err := _main(tea.StringSlice(os.Args[1:]))
	if err != nil {
		panic(err)
	}
}
