package tencentDescribeBillSummaryByProduct

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"time"

	_ "github.com/lib/pq"
	billing "github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/billing/v20180709"
	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common"
	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/errors"
	"github.com/tencentcloud/tencentcloud-sdk-go/tencentcloud/common/profile"
)

var (
	billMonth  string
	sqlConnStr string = fmt.Sprintf("postgres://%s:%s@%s:%s/%s?sslmode=disable",
		os.Getenv("POSTGRES_USER"),
		os.Getenv("POSTGRES_PASSWORD"),
		os.Getenv("POSTGRES_HOST"),
		os.Getenv("POSTGRES_PORT"),
		os.Getenv("POSTGRES_DB"))
)

type AutoGenerated struct {
	Response struct {
		RequestID          string `json:"RequestId"`
		ResourceSummarySet []struct {
			ActionTypeName     string `json:"ActionTypeName"`
			BillMonth          string `json:"BillMonth"`
			BusinessCode       string `json:"BusinessCode"`
			BusinessCodeName   string `json:"BusinessCodeName"`
			CashPayAmount      string `json:"CashPayAmount"`
			ConfigDesc         string `json:"ConfigDesc"`
			Discount           string `json:"Discount"`
			ExtendField1       string `json:"ExtendField1"`
			ExtendField2       string `json:"ExtendField2"`
			ExtendField3       string `json:"ExtendField3"`
			ExtendField4       string `json:"ExtendField4"`
			ExtendField5       string `json:"ExtendField5"`
			FeeBeginTime       string `json:"FeeBeginTime"`
			FeeEndTime         string `json:"FeeEndTime"`
			IncentivePayAmount string `json:"IncentivePayAmount"`
			InstanceType       string `json:"InstanceType"`
			OperateUin         string `json:"OperateUin"`
			OrderId            string `json:"OrderId"`
			OriginalCostWithRI string `json:"OriginalCostWithRI"`
			OriginalCostWithSP string `json:"OriginalCostWithSP"`
			OwnerUin           string `json:"OwnerUin"`
			PayModeName        string `json:"PayModeName"`
			PayTime            string `json:"PayTime"`
			PayerUin           string `json:"PayerUin"`
			ProductCode        string `json:"ProductCode"`
			ProductCodeName    string `json:"ProductCodeName"`
			ProjectName        string `json:"ProjectName"`
			RealTotalCost      string `json:"RealTotalCost"`
			ReduceType         string `json:"ReduceType"`
			RegionId           int    `json:"RegionId"`
			RegionName         string `json:"RegionName"`
			ResourceId         string `json:"ResourceId"`
			ResourceName       string `json:"ResourceName"`
			Tags               []any  `json:"Tags"`
			TotalCost          string `json:"TotalCost"`
			TransferPayAmount  string `json:"TransferPayAmount"`
			VoucherPayAmount   string `json:"VoucherPayAmount"`
			ZoneName           string `json:"ZoneName"`
		} `json:"ResourceSummarySet"`
		Total any `json:"Total"`
	} `json:"Response"`
}

func ToSql() {
	data := []byte(Get())
	checkSqlTable(data)
	writeSql(data)
}

func Get() string {
	// 实例化一个认证对象，入参需要传入腾讯云账户 SecretId 和 SecretKey，此处还需注意密钥对的保密
	// 代码泄露可能会导致 SecretId 和 SecretKey 泄露，并威胁账号下所有资源的安全性。以下代码示例仅供参考，建议采用更安全的方式来使用密钥，请参见：https://cloud.tencent.com/document/product/1278/85305
	// 密钥可前往官网控制台 https://console.cloud.tencent.com/cam/capi 进行获取
	credential := common.NewCredential(
		os.Getenv("SecretId"),
		os.Getenv("SecretKey"),
	)
	// 实例化一个client选项，可选的，没有特殊需求可以跳过
	cpf := profile.NewClientProfile()
	cpf.HttpProfile.Endpoint = "billing.tencentcloudapi.com"
	// 实例化要请求产品的client对象,clientProfile是可选的
	client, _ := billing.NewClient(credential, "", cpf)

	// 实例化一个请求对象,每个接口都会对应一个request对象
	request := billing.NewDescribeBillResourceSummaryRequest()

	// 判断是否出账
	cstSh, _ := time.LoadLocation("Asia/Shanghai")
	nowTime, _ := strconv.Atoi(time.Now().In(cstSh).Format("20060102"))
	billMonthTime, _ := strconv.Atoi(time.Now().In(cstSh).Format("200601") + "03")
	if nowTime <= billMonthTime {
		log.Println("账单未出，请明日再试")
		os.Exit(0)
	}

	//查询上个月账单
	billMonth = time.Now().AddDate(0, -1, 0).In(cstSh).Format("2006-01")

	request.Offset = common.Uint64Ptr(0)
	request.Limit = common.Uint64Ptr(1000)
	request.Month = common.StringPtr(billMonth)

	// 返回的resp是一个DescribeBillResourceSummaryResponse的实例，与请求对象对应
	response, err := client.DescribeBillResourceSummary(request)
	if _, ok := err.(*errors.TencentCloudSDKError); ok {
		fmt.Printf("An API error has returned: %s", err)
		return ""
	}
	if err != nil {
		panic(err)
	}
	// 输出json格式的字符串回包
	return response.ToJsonString()
}

func checkSqlTable(data []byte) {

	var p AutoGenerated
	err := json.Unmarshal(data, &p)
	if err != nil {
		log.Fatalln("解析返回值失败, func(checkSqlTable)", err)
	}

	// 如果不存在表，则新建。
	var tableNameList []string
	for _, i := range p.Response.ResourceSummarySet {
		tableNameList = append(tableNameList, i.BusinessCode)
	}

	uniqueList := removeDuplicates(tableNameList)

	db, err := sql.Open("postgres", sqlConnStr)
	if err != nil {
		log.Fatalln("连接数据库失败", err)
	}
	defer db.Close()

	rows, err := db.Query("SELECT * FROM pg_tables WHERE schemaname = 'public'")
	if err != nil {
		log.Fatalln("查询 pg_tables 失败", err)
	}
	defer rows.Close()

	var sqlTableList []string
	for rows.Next() {
		var schemaname string
		var tablename string
		var tableowner string
		var tablespace *string
		var hasindexes string
		var hasrules string
		var hastriggers string
		var rowsecurity string

		err := rows.Scan(&schemaname, &tablename, &tableowner, &tablespace, &hasindexes, &hasrules, &hastriggers, &rowsecurity)
		if err != nil {
			log.Fatalln("查询 pg_tables 失败", err)
		}
		sqlTableList = append(sqlTableList, tablename)
	}
	if err := rows.Err(); err != nil {
		log.Fatalln("查询 pg_tables 失败", err)
	}

	creatTableName := difference(uniqueList, sqlTableList)
	log.Println("创建表：", creatTableName)
	if len(creatTableName) != 0 {
		for _, v := range creatTableName {
			sqlData := fmt.Sprintf(`
				CREATE TABLE "public"."%s" (
				"Month" VARCHAR(7) NOT NULL,
				"ActionTypeName" VARCHAR(200) NOT NULL,
				"BillMonth" VARCHAR(200) NOT NULL,
				"BusinessCode" VARCHAR(200) NOT NULL,
				"BusinessCodeName" VARCHAR(200) NOT NULL,
				"CashPayAmount" NUMERIC NOT NULL,
				"ConfigDesc" VARCHAR(200),
				"Discount" NUMERIC NOT NULL,
				"ExtendField1" VARCHAR(200) NOT NULL,
				"ExtendField2" VARCHAR(200) NOT NULL,
				"ExtendField3" VARCHAR(200) NOT NULL,
				"ExtendField4" VARCHAR(200) NOT NULL,
				"ExtendField5" VARCHAR(200) NOT NULL,
				"FeeBeginTime" VARCHAR(200) NOT NULL,
				"FeeEndTime" VARCHAR(200) NOT NULL,
				"IncentivePayAmount" NUMERIC NOT NULL,
				"InstanceType" VARCHAR(200) NOT NULL,
				"OperateUin" VARCHAR(200) NOT NULL,
				"OrderId" VARCHAR(200) NOT NULL,
				"OriginalCostWithRI" NUMERIC NOT NULL,
				"OriginalCostWithSP" NUMERIC NOT NULL,
				"OwnerUin" VARCHAR(200) NOT NULL,
				"PayModeName" VARCHAR(200) NOT NULL,
				"PayTime" VARCHAR(200) NOT NULL,
				"PayerUin" VARCHAR(200) NOT NULL,
				"ProductCode" VARCHAR(200) NOT NULL,
				"ProductCodeName" VARCHAR(200) NOT NULL,
				"ProjectName" VARCHAR(200) NOT NULL,
				"RealTotalCost" NUMERIC NOT NULL,
				"ReduceType" VARCHAR(200) NOT NULL,
				"RegionId" INTEGER NOT NULL,
				"RegionName" VARCHAR(200) NOT NULL,
				"ResourceId" VARCHAR(200) NOT NULL,
				"ResourceName" VARCHAR(200) NOT NULL,
				"Tags" VARCHAR(200) NOT NULL,
				"TotalCost" NUMERIC NOT NULL,
				"TransferPayAmount" NUMERIC NOT NULL,
				"VoucherPayAmount" NUMERIC NOT NULL,
				"ZoneName" VARCHAR(200) NOT NULL);`, v)
			rows2, err := db.Query(sqlData)
			rows2.Close()
			if err != nil {
				log.Println(err)
			}
			sqlData = fmt.Sprintf(`COMMENT ON COLUMN "%s"."Month" IS '账期'`, v)
			rows2, err = db.Query(sqlData)
			rows2.Close()
			if err != nil {
				log.Fatalln("sql执行失败: ", sqlData, err)
			}
			sqlData = fmt.Sprintf(`COMMENT ON COLUMN "%s"."BusinessCode" IS '产品名称代码'`, v)
			rows2, err = db.Query(sqlData)
			rows2.Close()
			if err != nil {
				log.Fatalln("sql执行失败: ", sqlData, err)
			}
			sqlData = fmt.Sprintf(`COMMENT ON COLUMN "%s"."BusinessCodeName" IS '产品名称'`, v)
			rows2, err = db.Query(sqlData)
			rows2.Close()
			if err != nil {
				log.Fatalln("sql执行失败: ", sqlData, err)
			}
			sqlData = fmt.Sprintf(`COMMENT ON COLUMN "%s"."CashPayAmount" IS '现金支付金额'`, v)
			rows2, err = db.Query(sqlData)
			rows2.Close()
			if err != nil {
				log.Fatalln("sql执行失败: ", sqlData, err)
			}
			sqlData = fmt.Sprintf(`COMMENT ON COLUMN "%s"."PayerUin" IS '账单所属账号ID'`, v)
			rows2, err = db.Query(sqlData)
			rows2.Close()
			if err != nil {
				log.Fatalln("sql执行失败: ", sqlData, err)
			}
			sqlData = fmt.Sprintf(`COMMENT ON COLUMN "%s"."RealTotalCost" IS '实际总成本'`, v)
			rows2, err = db.Query(sqlData)
			rows2.Close()
			if err != nil {
				log.Fatalln("sql执行失败: ", sqlData, err)
			}
			sqlData = fmt.Sprintf(`COMMENT ON COLUMN "%s"."TotalCost" IS '总成本'`, v)
			rows2, err = db.Query(sqlData)
			rows2.Close()
			if err != nil {
				log.Fatalln("sql执行失败: ", sqlData, err)
			}
			sqlData = fmt.Sprintf(`COMMENT ON COLUMN "%s"."TransferPayAmount" IS '转账付款金额'`, v)
			rows2, err = db.Query(sqlData)
			rows2.Close()
			if err != nil {
				log.Fatalln("sql执行失败: ", sqlData, err)
			}
			sqlData = fmt.Sprintf(`COMMENT ON COLUMN "%s"."VoucherPayAmount" IS '凭证支付金额'`, v)
			rows2, err = db.Query(sqlData)
			rows2.Close()
			if err != nil {
				log.Fatalln("sql执行失败: ", sqlData, err)
			}
		}
	}
}

func removeDuplicates(list []string) []string {
	unique := make(map[string]struct{})
	for _, item := range list {
		unique[item] = struct{}{}
	}
	result := make([]string, 0, len(unique))
	for item := range unique {
		result = append(result, item)
	}
	return result
}

func intersect(slice1, slice2 []string) []string {
	m := make(map[string]int)
	nn := make([]string, 0)
	for _, v := range slice1 {
		m[v]++
	}

	for _, v := range slice2 {
		times, _ := m[v]
		if times == 1 {
			nn = append(nn, v)
		}
	}
	return nn
}

func difference(slice1, slice2 []string) []string {
	m := make(map[string]int)
	nn := make([]string, 0)
	inter := intersect(slice1, slice2)
	for _, v := range inter {
		m[v]++
	}

	for _, value := range slice1 {
		times, _ := m[value]
		if times == 0 {
			nn = append(nn, value)
		}
	}
	return nn
}

func writeSql(data []byte) {
	var p AutoGenerated
	err := json.Unmarshal(data, &p)
	if err != nil {
		log.Fatalln("解析返回值失败", err)
	}

	db, err := sql.Open("postgres", sqlConnStr)
	if err != nil {
		log.Fatalln("连接数据库失败 func writeSql()", err)
	}
	defer db.Close()

	for _, i := range p.Response.ResourceSummarySet {
		sqlData := fmt.Sprintf(`INSERT INTO "%s"("Month", "ActionTypeName", "BillMonth", "BusinessCode", "BusinessCodeName", "CashPayAmount", "ConfigDesc", "Discount", "ExtendField1", "ExtendField2", "ExtendField3", "ExtendField4", "ExtendField5", "FeeBeginTime", "FeeEndTime", "IncentivePayAmount", "InstanceType", "OperateUin", "OrderId", "OriginalCostWithRI", "OriginalCostWithSP", "OwnerUin", "PayModeName", "PayTime", "PayerUin", "ProductCode", "ProductCodeName", "ProjectName", "RealTotalCost", "ReduceType", "RegionId", "RegionName", "ResourceId", "ResourceName", "Tags", "TotalCost", "TransferPayAmount", "VoucherPayAmount", "ZoneName") VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s')`,
			i.BusinessCode,
			billMonth,
			i.ActionTypeName,
			i.BillMonth,
			i.BusinessCode,
			i.BusinessCodeName,
			i.CashPayAmount,
			i.ConfigDesc,
			i.Discount,
			i.ExtendField1,
			i.ExtendField2,
			i.ExtendField3,
			i.ExtendField4,
			i.ExtendField5,
			i.FeeBeginTime,
			i.FeeEndTime,
			i.IncentivePayAmount,
			i.InstanceType,
			i.OperateUin,
			i.OrderId,
			i.OriginalCostWithRI,
			i.OriginalCostWithSP,
			i.OwnerUin,
			i.PayModeName,
			i.PayTime,
			i.PayerUin,
			i.ProductCode,
			i.ProductCodeName,
			i.ProjectName,
			i.RealTotalCost,
			i.ReduceType,
			strconv.Itoa(i.RegionId),
			i.RegionName,
			i.ResourceId,
			i.ResourceName,
			i.Tags,
			i.TotalCost,
			i.TransferPayAmount,
			i.VoucherPayAmount,
			i.ZoneName)

		rows, err := db.Query(sqlData)
		rows.Close()
		if err != nil {
			log.Fatalln("sql执行失败 func writeSql(): ", err, sqlData)
		}
	}
	log.Println("写入数据完成")
}
